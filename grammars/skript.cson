scopeName: 'source.skript'
fileTypes: [
    'sk'
]
name: 'Skript'
limitLineLength: true

patterns: [
    { include: '#comment' }
    { include: '#members' }
    { include: '#sections' }
    { include: '#code' }
]

repository:
    comment:
        patterns: [
            {
                match: '(?<!#)#[^#\\n\\r]*$'
                name: 'comment.line.number-sign.skript'
            }
        ]
    code:
        comment: 'This can be re-used inside input elements.'
        patterns: [
            { include: '#literals' }
            { include: '#constants' }
            { include: '#variables' }
            { include: '#values' }
            { include: '#expressions' }
        ]
    members:
        patterns: [
            { include: '#member_options' }
            { include: '#member_aliases' }
            { include: '#member_event' }
            { include: '#member_command' }
            { include: '#member_command_options' }
            { include: '#member_function' }
        ]
    member_options:
        patterns: [
            {
                match: '^(options)(:)'
                captures:
                    1: name: 'keyword.control.event'
                    2: name: 'punctuation.definition.section.start'
            }
        ]
    member_aliases:
        patterns: [
            {
                match: '^(aliases)(:)'
                captures:
                    1: name: 'keyword.control.event'
                    2: name: 'punctuation.definition.section.start'
            }
        ]
    member_event:
        patterns: [
            {
                match: '^(on|at|every) (.+)(:)'
                captures:
                    1: name: 'keyword.control.event'
                    2: name: 'entity.name.function.event'
                    3: name: 'punctuation.definition.section.start'
            }
        ]
    member_function:
        patterns: [
            {
                match: '^(function) (\\w+)\\((.+)\\)(:)'
                captures:
                    1: name: 'keyword.control' # not .function because it upsets styling
                    2: name: 'entity.name.function'
                    3: patterns: [
                        { include: '#member_function_parameter' }
                    ]
                    4: name: 'punctuation.definition.section.start'
                name: 'meta.function'
            }
        ]
    member_function_parameter:
        patterns: [
            {
                match: '(\\w+)(:) (\\w+)'
                captures:
                    0: name: 'variable.parameter'
                    1: name: 'variable.other'
                    2: name: 'markup.bold'
                    3: name: 'entity.name.type.class'
            }
        ]
    member_command:
        patterns: [
            {
                begin: '^command'
                beginCaptures:
                    0: name: 'keyword.control.command'
                end: ':'
                endCaptures:
                    0: name: 'punctuation.definition.section.start'
                name: 'meta.command'
                patterns: [
                    { include: '#member_command_name' }
                    { include: '#member_command_argument' }
                ]
            }
        ]
    member_command_name:
        patterns: [
            {
                match: '(/)(\\w+)'
                captures:
                    1: name: 'markup.bold'
                    2: name: 'entity.name.function.command'
            }
        ]
    member_command_argument:
        patterns: [
            {
                match: '(<)(\\w+)(>)'
                captures:
                    1: name: 'markup.bold'
                    2: name: 'variable.other'
                    3: name: 'markup.bold'
            }
            {
                match: '(\\[<)(\\w+)(>\\])'
                captures:
                    1: name: 'markup.bold'
                    2: name: 'variable.other'
                    3: name: 'markup.bold'
            }
        ]
    member_command_options:
        patterns: [
            {
                match: '(aliases|description|usage|executable by|cooldown|cooldown message|cooldown bypass|cooldown storage|permission|(?:no )?permission message): (.+)'
                captures:
                    1: name: 'keyword.other'
                    2: patterns: []
            }
            {
                match: '(trigger):'
                captures:
                    1: name: 'keyword.control'
            }
        ]
    sections:
        patterns: [
            { include: '#section_if' }
            { include: '#section_loop' }
            { include: '#section_while' }
        ]
    section_if:
        patterns: [
            {
                match: '(?<=\\s)((?:else)? if) (.+)(:)'
                captures:
                    0: name: 'meta.section'
                    1: name: 'keyword.control'
                    2: patterns: [
                        { include: '#code' }
                    ]
                    3: name: 'punctuation.definition.section.start'
            }
            {
                match: '(?<=\\s)(else)(:)'
                captures:
                    0: name: 'meta.section'
                    1: name: 'keyword.control'
                    2: name: 'punctuation.definition.section.start'
            }
        ]
    section_loop:
        patterns: [
            {
                match: '(?<=\\s)(loop) (.+)(:)'
                captures:
                    0: name: 'meta.section'
                    1: name: 'keyword.control'
                    2: patterns: [
                        { include: '#code' }
                    ]
                    3: name: 'punctuation.definition.section.start'
            }
        ]
    section_while:
        patterns: [
            {
                match: '(?<=\\s)(while) (.+)(:)'
                captures:
                    0: name: 'meta.section'
                    1: name: 'keyword.control'
                    2: patterns: [
                        { include: '#code' }
                    ]
                    3: name: 'punctuation.definition.section.start'
            }
        ]
    constants:
        patterns: [
            {
                match: "\\b(none|null|false|true)\\b"
                captures:
                    0: name: 'variable.other.constant.skript'
            }
        ]
    keywords:
        patterns: [
            {
                match: "\\b(return|stop|if|else|loop|while)\\b"
                captures:
                    0: name: 'keyword.control'
            }
        ]
    variables:
        patterns: [
            {
                begin: '({)(@)'
                beginCaptures:
                    1: name: 'markup.bold'
                    2: name: 'markup.underline'
                end: '(})'
                endCaptures:
                    1: name: 'markup.bold'
                patterns: [
                    { include: '#input' }
                ]
                name: 'variable.other.option'
            }
            {
                begin: '({)(_)'
                beginCaptures:
                    1: name: 'markup.bold'
                    2: name: 'markup.underline'
                end: '(})'
                endCaptures:
                    1: name: 'markup.bold'
                patterns: [
                    { include: '#input' }
                ]
                name: 'variable.other.local'
            }
            {
                begin: '({)'
                beginCaptures:
                    1: name: 'markup.bold'
                end: '(})'
                endCaptures:
                    1: name: 'markup.bold'
                patterns: [
                    { include: '#input' }
                ]
                name: 'variable.other'
            }
        ]
    literals:
        patterns: [
            { include: '#literal_string' }
        ]
    literal_string:
        patterns: [
            {
                begin: '"'
                beginCaptures:
                    0: name: 'punctuation.definition.string.begin'
                end: '"'
                endCaptures:
                    0: name: 'punctuation.definition.string.end'
                name: 'string.quoted.double'
                patterns: [
                    { include: '#input' }
                ]
            }
        ]
    input:
        patterns: [
            {
                begin: '(%)'
                beginCaptures:
                    0: name: 'punctuation.definition.input.begin'
                    1: name: 'markup.bold'
                end: '(%)'
                endCaptures:
                    0: name: 'punctuation.definition.input.end'
                    1: name: 'markup.bold'
                name: 'meta.input'
                patterns: [
                    { include: '#code' }
                ]
            }
        ]
    values:
        patterns: [
            {
                comment: 'type-value-1'
                match: '(event|loop|arg)(-)([\\w]+)(-)([\\d]+)'
                captures:
                    1: name: 'variable.other'
                    2: name: 'markup.bold'
                    3: name: 'entity.name.type.class'
                    4: name: 'markup.bold'
                    5: name: 'constant.numeric'
            }
            {
                comment: 'arg-1'
                match: '(arg)(-)([\\w]+)(-)([\\d]+)'
                captures:
                    1: name: 'variable.other'
                    2: name: 'markup.bold'
                    5: name: 'constant.numeric'
            }
            {
                comment: 'type-value'
                match: '(event|loop|arg)(-)([\\w]+)'
                captures:
                    1: name: 'variable.other'
                    2: name: 'markup.bold'
                    3: name: 'entity.name.type.class'
            }
        ]
    expressions:
        patterns: []
